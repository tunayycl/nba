// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using NbaLibrary.Models;

namespace NbaShopService.Models
{
    public partial class nbashopContext : DbContext
    {
        public nbashopContext()
        {
        }

        public nbashopContext(DbContextOptions<nbashopContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cart> Cart { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Jersey> Jersey { get; set; }
        public virtual DbSet<Shorts> Shorts { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<purchase> purchase { get; set; }
        public virtual DbSet<viewcustomerproducts> viewcustomerproducts { get; set; }
        public virtual DbSet<viewjerseytype> viewjerseytype { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=127.0.0.1;Port=5432;Database=nbashop;User Id=postgres;Password=postgres;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasIndex(e => e.Date, "cart_date_uindex")
                    .IsUnique();

                entity.Property(e => e.CartID).ValueGeneratedOnAdd();

                entity.Property(e => e.Products)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.HasOne(d => d.CartNavigation)
                    .WithOne(p => p.Cart)
                    .HasForeignKey<Cart>(d => d.CartID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("customer_fk");

                entity.HasOne(d => d.purchase)
                    .WithMany(p => p.Cart)
                    .HasForeignKey(d => d.purchaseID)
                    .HasConstraintName("purchase_fk");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.CustomerID).ValueGeneratedNever();

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.HasOne(d => d.CustomerNavigation)
                    .WithOne(p => p.Customer)
                    .HasForeignKey<Customer>(d => d.CustomerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("purchase_ID_fk");
            });

            modelBuilder.Entity<Jersey>(entity =>
            {
                entity.Property(e => e.JerseyID).ValueGeneratedNever();

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.Jersey)
                    .HasForeignKey(d => d.TeamID)
                    .HasConstraintName("team_fk");
            });

            modelBuilder.Entity<Shorts>(entity =>
            {
                entity.Property(e => e.ShortsID).ValueGeneratedNever();

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.Shorts)
                    .HasForeignKey(d => d.TeamID)
                    .HasConstraintName("team_fk");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasIndex(e => e.Name, "team_name_uindex")
                    .IsUnique();

                entity.Property(e => e.TeamID).ValueGeneratedNever();

                entity.Property(e => e.Away).HasColumnType("character varying");

                entity.Property(e => e.Coast).HasColumnType("character varying");

                entity.Property(e => e.Home).HasColumnType("character varying");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasColumnType("character varying");

                entity.Property(e => e.Name).HasColumnType("character varying");
            });

            modelBuilder.Entity<purchase>(entity =>
            {
                entity.Property(e => e.purchaseID).ValueGeneratedNever();

                entity.HasOne(d => d.CustomerNavigation)
                    .WithMany(p => p.purchase)
                    .HasForeignKey(d => d.CustomerID)
                    .HasConstraintName("customerid_fk");

                entity.HasOne(d => d.jersey)
                    .WithMany(p => p.purchase)
                    .HasForeignKey(d => d.jerseyid)
                    .HasConstraintName("jerseyid_fk");

                entity.HasOne(d => d.shorts)
                    .WithMany(p => p.purchase)
                    .HasForeignKey(d => d.shortsid)
                    .HasConstraintName("shortsid_fk");
            });

            modelBuilder.Entity<viewcustomerproducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewcustomerproducts");

                entity.Property(e => e.Email).HasColumnType("character varying");

                entity.Property(e => e.Firstname).HasColumnType("character varying");

                entity.Property(e => e.LastName).HasColumnType("character varying");

                entity.Property(e => e.Location).HasColumnType("character varying");

                entity.Property(e => e.Products).HasColumnType("character varying");
            });

            modelBuilder.Entity<viewjerseytype>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewjerseytype");

                entity.Property(e => e.Firstname).HasColumnType("character varying");

                entity.Property(e => e.LastName).HasColumnType("character varying");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}